#include<bits/stdc++.h>
using namespace std;

// returns a vector of distances
vector<vector<int>> Floyd_Warshall(vector<vector<int>> adj, int n) {
    vector<int> v(n+1, 0);
    vector<vector<int>> dist(n+1, v);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i == j) dist[i][j] = 0;
            else { dist[i][j] = adj[i][j]; }
        }
    }
    for (int k = 1; k <= n; k++) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                dist[i][j] = min(dist[i][j],dist[i][k]+dist[k][j]);
            }
        }
    }
    return dist;
}


int main()
{
    int n;
    cout << "Enter the amount of nodes: ";
    cin >> n;
    int b, w;
    vector<int> v(n+1, 1000000);
    vector<vector<int>> adjM(n+1, v);
    for (int a = 1; a <= n; a++) {
        cout << "node " << a << ": ";
        cin >> b >> w;
        while (b != -1) {
            adjM[a][b] = w;
            cin >> b >> w;
        }
    }

    vector<vector<int>> resM = Floyd_Warshall(adjM, n);

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << resM[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
